-- LMS SUPPIERS DETAILS --
CREATE TABLE LMS_SUPPLIERS_DETAILS(SUPPLIER_ID VARCHAR(3) PRIMARY KEY, SUPPLIER_NAME VARCHAR(30), 
ADDRESS VARCHAR(50),CONTACT INT, EMAIL VARCHAR(15));

ALTER TABLE LMS_SUPPLIERS_DETAILS ALTER COLUMN CONTACT BIGINT;

INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S01','SINGAPORE SHOPPEE', 'CHENNAI', 9894123555,'SING@GMAIL.COM');
INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S02','JK STORES', 'MUMBAI', 9940123450 ,'JKS@YAHOO.COM');
INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S03','ROSE BOOK STORE', 'TRIVANDRUM', 9444411222,'ROSE@GMAIL.COM');
INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S04','KAVARI STORE', 'DELHI', 8630001452,'KAVI@REDIF.COM');
INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S05','EINSTEN BOOK GALLARY', 'US', 9542000001,'EINGAL@AOL.COM');
INSERT INTO LMS_SUPPLIERS_DETAILS 
VALUES ('S06','AKBAR STORE', 'MUMBAI',7855623100 ,'AKBAKST@AOL.COM');

SELECT * FROM LMS_SUPPLIERS_DETAILS;

-- LMS FINE DETAILS --
CREATE TABLE LMS_FINE_DETAILS(FINE_RANGE VARCHAR(3) PRIMARY KEY, FINE_AMOUNT INT);

INSERT INTO LMS_FINE_DETAILS VALUES('R0', 0);
INSERT INTO LMS_FINE_DETAILS VALUES('R1', 20);
INSERT INTO LMS_FINE_DETAILS VALUES('R2', 50);
INSERT INTO LMS_FINE_DETAILS VALUES('R3', 75);
INSERT INTO LMS_FINE_DETAILS VALUES('R4', 100);
INSERT INTO LMS_FINE_DETAILS VALUES('R5', 150);
INSERT INTO LMS_FINE_DETAILS VALUES('R6', 200);

SELECT * FROM LMS_FINE_DETAILS;

-- LMS MEMBERS --
CREATE TABLE LMS_MEMBERS(MEMBER_ID VARCHAR(10) PRIMARY KEY, MEMBER_NAME VARCHAR(30), 
CITY VARCHAR(20),DATE_REGISTER DATE, DATE_EXPIRE DATE, MEMBERSHIP_STATUS VARCHAR(15));

INSERT INTO LMS_MEMBERS
VALUES('LM001', 'AMIT', 'CHENNAI', '2012-02-12', '2013-02-11','TEMPORARY');
INSERT INTO LMS_MEMBERS
VALUES('LM002', 'ABDHUL', 'DELHI', '2012-04-10', '2013-04-09','TEMPORARY');
INSERT INTO LMS_MEMBERS
VALUES('LM003', 'GAYAN', 'CHENNAI', '2012-05-13','2013-05-12', 'PERMANENT');
INSERT INTO LMS_MEMBERS
VALUES('LM004', 'RADHA', 'CHENNAI', '2012-04-22', '2013-04-21', 'TEMPORARY');
INSERT INTO LMS_MEMBERS
VALUES('LM005', 'GURU', 'BANGALORE', '2012-03-30', '2013-05-16','TEMPORARY');
INSERT INTO LMS_MEMBERS
VALUES('LM006', 'MOHAN', 'CHENNAI', '2012-04-12', '2013-05-16','TEMPORARY');

SELECT * FROM LMS_MEMBERS;

-- LMS BOOK DETAILS --
CREATE TABLE LMS_BOOK_DETAILS(BOOK_CODE VARCHAR(10) PRIMARY KEY,BOOK_TITLE VARCHAR(50),CATEGORY VARCHAR(15),
AUTHOR VARCHAR(30), PUBLICATION VARCHAR(30), PUBLIC_DATE DATE, BOOK_EDITION INT, PRICE INT, 
RACK_NUM VARCHAR(3),DATE_ARRIVAL DATE, SUPPLIER_ID VARCHAR(3), 
CONSTRAINT fk_book_supplier FOREIGN KEY(SUPPLIER_ID) 
REFERENCES LMS_SUPPLIERS_DETAILS(SUPPLIER_ID));

INSERT INTO LMS_BOOK_DETAILS
VALUES('BL000010', 'JAVA FORVDUMMIES', 'JAVA', 'PAUL J. DEITEL', 'PRENTICE HALL', '1999-12-10', 6, 575.00, 'A1', '2011-05-10', 'S01');
INSERT INTO LMS_BOOK_DETAILS
VALUES('BL000002', 'JAVA: THE COMPLETE REFERENCE ', 'JAVA', 'HERBERT SCHILDT', 'TATA MCGRAW HILL ', '2011-10-10', 5, 750.00, 'A1', '2011-05-10', 'S03');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000003', 'JAVA HOW TO DO PROGRAM', 'JAVA', 'PAUL J. DEITEL', 'PRENTICE HALL', '1999-05-10', 6, 600.00, 'A1', '2012-05-10', 'S01');
INSERT INTO LMS_BOOK_DETAILS
VALUES('BL000004', 'JAVA: THE COMPLETE REFERENCE ', 'JAVA', 'HERBERT SCHILDT', 'TATA MCGRAW HILL ', '2011-10-10', 5, 750.00, 'A1', '2012-05-11', 'S01');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000005', 'JAVA HOW TO DO PROGRAM', 'JAVA', 'PAUL J. DEITEL', 'PRENTICE HALL', '1999-12-10', 6, 600.00, 'A1', '2012-05-11', 'S01');
INSERT INTO LMS_BOOK_DETAILS
VALUES('BL000006', 'JAVA: THE COMPLETE REFERENCE ', 'JAVA', 'HERBERT SCHILDT', 'TATA MCGRAW HILL ', '2011-10-10', 5, 750.00, 'A1', '2012-05-12', 'S03');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000007', 'LET US C', 'C', 'YASHAVANT KANETKAR ', 'BPB PUBLICATIONS', '2010-12-11', 9, 500.00 , 'A3', '2010-11-03', 'S03');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000008', 'LET US C', 'C', 'YASHAVANT KANETKAR ','BPB PUBLICATIONS', '2010-05-12', 9, 500.00 , 'A3', '2011-08-09', 'S04');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000009', 'LET US C#', 'C', 'YASHAVANT KANETKAR ','BPB PUBLICATIONS', '2010-05-12', 9, 550.00 , 'A3', '2011-08-09', 'S04');
INSERT INTO LMS_BOOK_DETAILS 
VALUES('BL000011', 'LET US C++', 'C', 'YASHAVANT KANETKAR ','BPB PUBLICATIONS', '2010-05-12', 9, 650.00 , 'A3', '2011-08-09', 'S04');
SELECT * FROM LMS_BOOK_DETAILS;

-- LMS BOOK ISSUE --
CREATE TABLE LMS_BOOK_ISSUE(BOOK_ISSUE_NO INT, MEMBER_ID  VARCHAR(10),BOOK_CODE VARCHAR(10),
DATE_ISSUE DATE, DATE_RETUN DATE, DATE_RETURNED DATE,FINE_RANGE VARCHAR(3),
CONSTRAINT fk_issued_member FOREIGN KEY(MEMBER_ID) REFERENCES LMS_MEMBERS(MEMBER_ID), 
CONSTRAINT fk_issued_book FOREIGN KEY(BOOK_CODE) REFERENCES LMS_BOOK_DETAILS(BOOK_CODE),
CONSTRAINT fk_issued_fine FOREIGN KEY(FINE_RANGE) REFERENCES LMS_FINE_DETAILS(FINE_RANGE));


INSERT INTO LMS_BOOK_ISSUE 
VALUES (001, 'LM001', 'BL000010', '2012-05-01', '2012-05-16', '2012-05-16', 'R0');
INSERT INTO LMS_BOOK_ISSUE 
VALUES (002, 'LM002', 'BL000002', '2012-05-01', '2012-05-06','2012-05-16', 'R2');
INSERT INTO LMS_BOOK_ISSUE
VALUES (003, 'LM003', 'BL000007', '2012-04-01', '2012-04-16', '2012-04-20','R1');
INSERT INTO LMS_BOOK_ISSUE 
VALUES (004, 'LM004', 'BL000005', '2012-04-01', '2012-04-16','2012-04-20', 'R1');
INSERT INTO LMS_BOOK_ISSUE 
VALUES (005, 'LM005', 'BL000008', '2012-03-30', '2012-04-15','2012-04-20' , 'R1');
INSERT INTO LMS_BOOK_ISSUE 
VALUES (006, 'LM005', 'BL000008', '2012-04-20', '2012-05-05','2012-05-05' , 'R0');
INSERT INTO LMS_BOOK_ISSUE 
VALUES (007, 'LM003', 'BL000007', '2012-04-22', '2012-05-07','2012-05-25' , 'R4');

SELECT * FROM LMS_BOOK_ISSUE ;



-- 1 DESCRIBE STRUCTURE OF LMS BOOK DETAILS --
EXEC sp_help 'LMS_BOOK_DETAILS';


-- 2 QUERY TO SELECT ALL LMS FINE DETAILS --
GO

CREATE OR ALTER FUNCTION SelectFineDetails()
RETURNS TABLE
AS 
	RETURN 
		SELECT * FROM LMS_FINE_DETAILS;

GO

SELECT * FROM SelectFineDetails();

-- 3 NAME OF MEMBERS BASED ON LOCATION --
GO

CREATE OR ALTER FUNCTION SelectMembersBasedOnLocation(@city VARCHAR(20))
RETURNS TABLE
AS
	RETURN
		(SELECT MEMBER_NAME FROM LMS_MEMBERS WHERE CITY = @city);

GO

SELECT * FROM SelectMembersBasedOnLocation('Chennai');

-- 4 LIFE TIME MEMBERSHIP --
GO

CREATE OR ALTER FUNCTION SelectMembersBasedOnMembership()
RETURNS TABLE
AS
	RETURN
		(SELECT MEMBER_ID,MEMBER_NAME,CITY,MEMBERSHIP_STATUS 
		FROM LMS_MEMBERS 
		WHERE MEMBERSHIP_STATUS = 'Permanent');

GO

SELECT * FROM SelectMembersBasedOnMembership();

-- 5 DISPLAY MEMBERS WHO HAVE TAKEN BOOK WITH BOOK CODE --
GO

CREATE OR ALTER FUNCTION MemberWhoTakenBook(@bookCode VARCHAR(10))
RETURNS TABLE
AS
	RETURN 
		(SELECT LMS_MEMBERS.MEMBER_ID,LMS_MEMBERS.MEMBER_NAME FROM LMS_MEMBERS JOIN LMS_BOOK_ISSUE
		ON LMS_MEMBERS.MEMBER_ID = LMS_BOOK_ISSUE.MEMBER_ID 
		WHERE LMS_BOOK_ISSUE.BOOK_CODE = @bookCode);

GO

SELECT * FROM MemberWhoTakenBook('BL000002');

-- 6 BOOK WITH AUTHOR NAME STARTING WITH P --
GO

CREATE OR ALTER FUNCTION BookWithAuthorP()
RETURNS TABLE
AS
	RETURN
		(SELECT BOOK_CODE,BOOK_TITLE,AUTHOR FROM LMS_BOOK_DETAILS WHERE AUTHOR LIKE 'P%');

GO

SELECT * FROM BookWithAuthorP();

-- 7 COUNT OF BOOK BY SINGLE CATEGORY --
GO

CREATE OR ALTER FUNCTION BooksByCategory(@category VARCHAR(15))
RETURNS TABLE
AS
	RETURN
		(SELECT CATEGORY,COUNT(*) AS NO_OF_BOOKS FROM LMS_BOOK_DETAILS 
		WHERE CATEGORY = @category GROUP BY CATEGORY);

GO

SELECT * FROM BooksByCategory('JAVA');

-- 8 COUNT OF ALL CATEGORY OF BOOKS --
GO

CREATE OR ALTER FUNCTION CountCategory()
RETURNS TABLE
AS 
	RETURN
		(SELECT CATEGORY,COUNT(*) AS NO_OF_BOOKS FROM LMS_BOOK_DETAILS GROUP BY CATEGORY);

GO

SELECT * FROM CountCategory();

-- 9 BOOKS PUBLISHED BY --
GO

CREATE OR ALTER FUNCTION BookByPublisher(@publication VARCHAR(30))
RETURNS TABLE
AS 
	RETURN
		(SELECT PUBLICATION,COUNT(*) AS NO_OF_BOOKS FROM LMS_BOOK_DETAILS 
		WHERE PUBLICATION = @publication GROUP BY PUBLICATION);

GO

SELECT * FROM BookByPublisher('Prentice Hall');

-- 10 BOOK ISSUED BY DATE --
GO

CREATE OR ALTER FUNCTION BookIssuedByDate(@issuedDate DATE)
RETURNS TABLE
AS
	RETURN
		(SELECT LMS_BOOK_DETAILS.BOOK_CODE,LMS_BOOK_DETAILS.BOOK_TITLE FROM LMS_BOOK_DETAILS 
		JOIN LMS_BOOK_ISSUE ON LMS_BOOK_DETAILS.BOOK_CODE = LMS_BOOK_ISSUE.BOOK_CODE 
		WHERE LMS_BOOK_ISSUE.DATE_ISSUE=@issuedDate);

GO

SELECT * FROM BookIssuedByDate('2012-04-01');

-- 11 MEMBERSHIP WITH EXPIRY DATE --
GO

CREATE OR ALTER FUNCTION MembershipWithExpiryDate(@expiryDate DATE)
RETURNS TABLE
AS
	RETURN 
		(SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER,DATE_EXPIRE FROM LMS_MEMBERS 
		WHERE DATE_EXPIRE<=@expiryDate);

GO

SELECT * FROM MembershipWithExpiryDate('2013-04-01');

-- 12 MEMBERSHIP WITH REGISTRATION DATE AND STATUS --
GO

CREATE OR ALTER FUNCTION MembershipWithRegistrationDateAndStatus(@registerDate DATE,@memberStatus VARCHAR(15))
RETURNS TABLE
AS
	RETURN 
		(SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER,MEMBERSHIP_STATUS FROM LMS_MEMBERS 
		WHERE DATE_REGISTER<=@registerDate AND MEMBERSHIP_STATUS = @memberStatus);

GO

SELECT * FROM MembershipWithRegistrationDateAndStatus('01-03-2013','TEMPORARY');

-- 13 AVERAGE PRICE OF BOOKS BASED ON CATEGORY --
GO

CREATE OR ALTER FUNCTION AveragePrice(@category VARCHAR(15))
RETURNS TABLE
AS
	RETURN
		(SELECT AVG(PRICE) AS 'AVERAGE PRICE'
		FROM LMS_BOOK_DETAILS
		WHERE CATEGORY = @category);
GO

SELECT * FROM AveragePrice('JAVA');

--  14 CONCATENATE BOOK TITLE,AUTHOR AND DISPLAY AS Book_Title_is_Written_by_Author --
GO

CREATE OR ALTER FUNCTION ConcatAuthor()
RETURNS TABLE
AS
	RETURN
		(SELECT CONCAT(BOOK_TITLE, 'is_written_by', AUTHOR) AS BOOK_INFO FROM LMS_BOOK_DETAILS);

GO

SELECT * FROM ConcatAuthor();

-- 15 DISPLAY MEMBER WITH CHENNAI OR DELHI --
GO

CREATE OR ALTER FUNCTION MemberWithTwoCities()
RETURNS TABLE
AS
	RETURN
		(SELECT MEMBER_ID, MEMBER_NAME FROM LMS_MEMBERS WHERE CITY IN ('Chennai', 'Delhi'));

GO

SELECT * FROM MemberWithTwoCities();

-- 16 DISPLAY SUPPLIERS WITH GMAIL --
GO

CREATE OR ALTER FUNCTION SupplierWithGmail()
RETURNS TABLE
AS
	RETURN
		(SELECT SUPPLIER_ID, SUPPLIER_NAME,EMAIL FROM LMS_SUPPLIERS_DETAILS WHERE EMAIL LIKE '%@gmail.com');

GO

SELECT * FROM SupplierWithGmail();

-- 17 QUERY TO DISPLAY SUPPLIER ID , SUPPLIER NAME AND CONATCT DETAILS.CONTACT DETAILS --
-- CAN BE EITHER PHONE NUMBER OR EMAIL ADDRESS WITH ALIAS NULL THEN DISPLAY EMAIL,IT ALSO NULL --
-- THEN DISPLAY THE ADDRESS OF THE SUPPLIER.HINT USE COALESCE FUNCTION --
GO

CREATE OR ALTER FUNCTION SupplierContactDetails()
RETURNS TABLE
AS
	RETURN
		(SELECT SUPPLIER_ID, SUPPLIER_NAME,COALESCE(CONTACT,EMAIL) AS CONTACT_DETAILS FROM LMS_SUPPLIERS_DETAILS);

GO

SELECT * FROM SupplierContactDetails();


-- 18 DISPLAY THE MEMBER ID,MEMBER NAME OF THE MEMBERS,BOOK CODE AND BOOK TITLE OF THE BOOKS TAKEN BY THEM --
GO

CREATE OR ALTER FUNCTION MemberBookDetails()
RETURNS TABLE
AS
	RETURN
		(SELECT LMS_MEMBERS.MEMBER_ID,LMS_MEMBERS.MEMBER_NAME,LMS_BOOK_DETAILS.BOOK_CODE,LMS_BOOK_DETAILS.BOOK_TITLE FROM LMS_MEMBERS JOIN LMS_BOOK_ISSUE ON LMS_MEMBERS.MEMBER_ID = LMS_BOOK_ISSUE.MEMBER_ID JOIN LMS_BOOK_DETAILS ON LMS_BOOK_ISSUE.BOOK_CODE = LMS_BOOK_DETAILS.BOOK_CODE);

GO

SELECT * FROM MemberBookDetails();

-- 19 DIPLAY MEMBERS WHOSE FINE AMOUNT IS LESS THAN 100 --
GO

CREATE OR ALTER FUNCTION MemberFineDetails()
RETURNS TABLE
AS
	RETURN
		(SELECT LMS_MEMBERS.MEMBER_ID,LMS_MEMBERS.MEMBER_NAME,
		LMS_FINE_DETAILS.FINE_RANGE,LMS_FINE_DETAILS.FINE_AMOUNT 
		FROM LMS_BOOK_ISSUE 
		JOIN LMS_MEMBERS
		ON LMS_BOOK_ISSUE.MEMBER_ID = LMS_MEMBERS.MEMBER_ID 
		JOIN LMS_FINE_DETAILS 
		ON LMS_BOOK_ISSUE.FINE_RANGE = LMS_FINE_DETAILS.FINE_RANGE 
		WHERE FINE_AMOUNT < 100);

GO

SELECT * FROM MemberFineDetails();


-- 20 DISPLAY THE BOOKS WHICH ARE PLACED IN RACK 'A1 AND SORT BY BOOK TITLE IN ASCENDING ORDER --
GO

CREATE OR ALTER PROCEDURE BookRackDetails
AS
BEGIN
SELECT BOOK_CODE,BOOK_TITLE,RACK_NUM FROM LMS_BOOK_DETAILS WHERE RACK_NUM = 'A1' ORDER BY BOOK_TITLE ASC;
END

GO

EXEC BookRackDetails;

-- 21 DISPLAY MEMBERS WHO HAVE NOT TAKEN ANY BOOK --
GO

CREATE OR ALTER FUNCTION MemberNotTakenBook()
RETURNS TABLE
AS
	RETURN
		(SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER FROM LMS_MEMBERS WHERE MEMBER_ID NOT IN (SELECT MEMBER_ID FROM LMS_BOOK_ISSUE));

GO

SELECT * FROM MemberNotTakenBook();

-- 22 DISPLAY THE MEMBER WHO HAS NOT PAID ANY FINE IN THE YEAR 2012 --
GO

CREATE OR ALTER FUNCTION MemberNotPaidFine()
RETURNS TABLE
AS
	RETURN
		(SELECT MEMBER_ID,MEMBER_NAME FROM LMS_MEMBERS WHERE MEMBER_ID 
		NOT IN 
		(SELECT LMS_MEMBERS.MEMBER_ID FROM LMS_MEMBERS 
		JOIN LMS_BOOK_ISSUE ON LMS_MEMBERS.MEMBER_ID = LMS_BOOK_ISSUE.MEMBER_ID 
		WHERE LMS_BOOK_ISSUE.FINE_RANGE = 'R0' AND YEAR(LMS_BOOK_ISSUE.DATE_RETURNED) = 2012));

GO

SELECT * FROM MemberNotPaidFine();

-- 23 DISPLAY THE RACK NUMBER AND THE NUMBER OF BOOKS IN EACH RACK WITH 
-- ALIAS NAME "NOOFBOOKS" AND SORT BY BOOK TITLE IN ASCENDING ORDER
GO

CREATE OR ALTER PROCEDURE RackBookDetails
AS
BEGIN
SELECT RACK_NUM,COUNT(*) AS NOOFBOOKS FROM LMS_BOOK_DETAILS GROUP BY RACK_NUM ORDER BY RACK_NUM ASC;
END

GO

EXEC RackBookDetails;


-- 24 DISPLAY BOOK DETAILS AND ISSUE DETAILS --
GO

CREATE OR ALTER FUNCTION CompleteBookIssueDetails()
RETURNS TABLE
AS
	RETURN
		(SELECT LMS_BOOK_ISSUE.BOOK_ISSUE_NO, LMS_MEMBERS.MEMBER_NAME, 
		LMS_MEMBERS.DATE_REGISTER, LMS_MEMBERS.DATE_EXPIRE,
		LMS_BOOK_DETAILS.BOOK_TITLE, LMS_BOOK_DETAILS.CATEGORY, 
		LMS_BOOK_DETAILS.PRICE, LMS_BOOK_ISSUE.DATE_ISSUE,
		LMS_BOOK_ISSUE.DATE_RETUN, LMS_BOOK_ISSUE.DATE_RETURNED, LMS_FINE_DETAILS.FINE_AMOUNT 
		FROM LMS_BOOK_DETAILS 
		JOIN LMS_BOOK_ISSUE 
		ON LMS_BOOK_DETAILS.BOOK_CODE = LMS_BOOK_ISSUE.BOOK_CODE 
		JOIN LMS_MEMBERS
		ON LMS_BOOK_ISSUE.MEMBER_ID = LMS_MEMBERS.MEMBER_ID 
		JOIN LMS_FINE_DETAILS
		ON LMS_BOOK_ISSUE.FINE_RANGE = LMS_FINE_DETAILS.FINE_RANGE);

GO

SELECT * FROM CompleteBookIssueDetails();

-- 25 REMAINING BOOKS --
GO

CREATE OR ALTER FUNCTION MemberRemainingBooks()
RETURNS TABLE
AS
	RETURN
		(SELECT LMS_MEMBERS.MEMBER_ID,LMS_MEMBERS.MEMBER_NAME,3-COUNT(*) AS RemainingBooks 
		FROM LMS_MEMBERS 
		JOIN LMS_BOOK_ISSUE ON LMS_MEMBERS.MEMBER_ID = LMS_BOOK_ISSUE.MEMBER_ID 
		GROUP BY LMS_MEMBERS.MEMBER_ID,LMS_MEMBERS.MEMBER_NAME);

GO

SELECT * FROM MemberRemainingBooks();

-- 26 DISPLAY FIRST THREE SUPPLIERS --
GO

CREATE OR ALTER FUNCTION DisplayFirst()
RETURNS TABLE
AS
	RETURN
		(SELECT TOP 3 * FROM LMS_SUPPLIERS_DETAILS ORDER BY SUPPLIER_ID);

GO

SELECT * FROM DisplayFirst();

-- 27 DISPLAY SUPPLIERS EXCLUDING FIRST THREE --
GO

CREATE OR ALTER FUNCTION DisplayWithExcluding()
RETURNS TABLE
AS
	RETURN
		(SELECT * FROM LMS_SUPPLIERS_DETAILS ORDER BY SUPPLIER_ID OFFSET 3 ROWS);

GO

SELECT * FROM DisplayWithExcluding();

-- 28 RENAME TABLE --
GO

EXEC sp_rename 'LMS_MEMBERS','LMS_MEMBERS_DETAILS';

-- 29 DELETE ALL ROWS FROM FINE --
GO

CREATE OR ALTER PROCEDURE DeleteFine
AS
TRUNCATE TABLE LMS_FINE_DETAILS;

GO

EXEC DeleteFine;

-- 30 ALL BOOK NAMES WITHOUT * --

GO

CREATE OR ALTER FUNCTION SelectBookName()
RETURNS TABLE
AS
	RETURN
		(SELECT BOOK_TITLE FROM LMS_BOOK_DETAILS);

GO

SELECT * FROM SelectBookName();

GO











